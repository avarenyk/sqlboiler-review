// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Flight is an object representing the database table.
type Flight struct {
	ID            uint64    `boil:"id" json:"id" toml:"id" yaml:"id"`
	OriginID      int       `boil:"origin_id" json:"origin_id" toml:"origin_id" yaml:"origin_id"`
	DestinationID int       `boil:"destination_id" json:"destination_id" toml:"destination_id" yaml:"destination_id"`
	JetID         int       `boil:"jet_id" json:"jet_id" toml:"jet_id" yaml:"jet_id"`
	PilotID       int       `boil:"pilot_id" json:"pilot_id" toml:"pilot_id" yaml:"pilot_id"`
	SecondPilotID null.Int  `boil:"second_pilot_id" json:"second_pilot_id,omitempty" toml:"second_pilot_id" yaml:"second_pilot_id,omitempty"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *flightR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L flightL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var FlightColumns = struct {
	ID            string
	OriginID      string
	DestinationID string
	JetID         string
	PilotID       string
	SecondPilotID string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	OriginID:      "origin_id",
	DestinationID: "destination_id",
	JetID:         "jet_id",
	PilotID:       "pilot_id",
	SecondPilotID: "second_pilot_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

type whereHelperuint64 struct{ field string }

func (w whereHelperuint64) EQ(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint64) NEQ(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint64) LT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint64) LTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint64) GT(x uint64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint64) GTE(x uint64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint64) IN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint64) NIN(slice []uint64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var FlightWhere = struct {
	ID            whereHelperuint64
	OriginID      whereHelperint
	DestinationID whereHelperint
	JetID         whereHelperint
	PilotID       whereHelperint
	SecondPilotID whereHelpernull_Int
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperuint64{field: "`flights`.`id`"},
	OriginID:      whereHelperint{field: "`flights`.`origin_id`"},
	DestinationID: whereHelperint{field: "`flights`.`destination_id`"},
	JetID:         whereHelperint{field: "`flights`.`jet_id`"},
	PilotID:       whereHelperint{field: "`flights`.`pilot_id`"},
	SecondPilotID: whereHelpernull_Int{field: "`flights`.`second_pilot_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`flights`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`flights`.`updated_at`"},
}

// FlightRels is where relationship names are stored.
var FlightRels = struct {
	Origin      string
	Destination string
	Jet         string
	Pilot       string
	SecondPilot string
}{
	Origin:      "Origin",
	Destination: "Destination",
	Jet:         "Jet",
	Pilot:       "Pilot",
	SecondPilot: "SecondPilot",
}

// flightR is where relationships are stored.
type flightR struct {
	Origin      *Airport `boil:"Origin" json:"Origin" toml:"Origin" yaml:"Origin"`
	Destination *Airport `boil:"Destination" json:"Destination" toml:"Destination" yaml:"Destination"`
	Jet         *Jet     `boil:"Jet" json:"Jet" toml:"Jet" yaml:"Jet"`
	Pilot       *Pilot   `boil:"Pilot" json:"Pilot" toml:"Pilot" yaml:"Pilot"`
	SecondPilot *Pilot   `boil:"SecondPilot" json:"SecondPilot" toml:"SecondPilot" yaml:"SecondPilot"`
}

// NewStruct creates a new relationship struct
func (*flightR) NewStruct() *flightR {
	return &flightR{}
}

// flightL is where Load methods for each relationship are stored.
type flightL struct{}

var (
	flightAllColumns            = []string{"id", "origin_id", "destination_id", "jet_id", "pilot_id", "second_pilot_id", "created_at", "updated_at"}
	flightColumnsWithoutDefault = []string{"origin_id", "destination_id", "jet_id", "pilot_id", "second_pilot_id"}
	flightColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	flightPrimaryKeyColumns     = []string{"id"}
)

type (
	// FlightSlice is an alias for a slice of pointers to Flight.
	// This should generally be used opposed to []Flight.
	FlightSlice []*Flight

	flightQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	flightType                 = reflect.TypeOf(&Flight{})
	flightMapping              = queries.MakeStructMapping(flightType)
	flightPrimaryKeyMapping, _ = queries.BindMapping(flightType, flightMapping, flightPrimaryKeyColumns)
	flightInsertCacheMut       sync.RWMutex
	flightInsertCache          = make(map[string]insertCache)
	flightUpdateCacheMut       sync.RWMutex
	flightUpdateCache          = make(map[string]updateCache)
	flightUpsertCacheMut       sync.RWMutex
	flightUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single flight record from the query using the global executor.
func (q flightQuery) OneG() (*Flight, error) {
	return q.One(boil.GetDB())
}

// One returns a single flight record from the query.
func (q flightQuery) One(exec boil.Executor) (*Flight, error) {
	o := &Flight{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for flights")
	}

	return o, nil
}

// AllG returns all Flight records from the query using the global executor.
func (q flightQuery) AllG() (FlightSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Flight records from the query.
func (q flightQuery) All(exec boil.Executor) (FlightSlice, error) {
	var o []*Flight

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Flight slice")
	}

	return o, nil
}

// CountG returns the count of all Flight records in the query, and panics on error.
func (q flightQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Flight records in the query.
func (q flightQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count flights rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q flightQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q flightQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if flights exists")
	}

	return count > 0, nil
}

// Origin pointed to by the foreign key.
func (o *Flight) Origin(mods ...qm.QueryMod) airportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OriginID),
	}

	queryMods = append(queryMods, mods...)

	query := Airports(queryMods...)
	queries.SetFrom(query.Query, "`airports`")

	return query
}

// Destination pointed to by the foreign key.
func (o *Flight) Destination(mods ...qm.QueryMod) airportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.DestinationID),
	}

	queryMods = append(queryMods, mods...)

	query := Airports(queryMods...)
	queries.SetFrom(query.Query, "`airports`")

	return query
}

// Jet pointed to by the foreign key.
func (o *Flight) Jet(mods ...qm.QueryMod) jetQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.JetID),
	}

	queryMods = append(queryMods, mods...)

	query := Jets(queryMods...)
	queries.SetFrom(query.Query, "`jets`")

	return query
}

// Pilot pointed to by the foreign key.
func (o *Flight) Pilot(mods ...qm.QueryMod) pilotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.PilotID),
	}

	queryMods = append(queryMods, mods...)

	query := Pilots(queryMods...)
	queries.SetFrom(query.Query, "`pilots`")

	return query
}

// SecondPilot pointed to by the foreign key.
func (o *Flight) SecondPilot(mods ...qm.QueryMod) pilotQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.SecondPilotID),
	}

	queryMods = append(queryMods, mods...)

	query := Pilots(queryMods...)
	queries.SetFrom(query.Query, "`pilots`")

	return query
}

// LoadOrigin allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightL) LoadOrigin(e boil.Executor, singular bool, maybeFlight interface{}, mods queries.Applicator) error {
	var slice []*Flight
	var object *Flight

	if singular {
		object = maybeFlight.(*Flight)
	} else {
		slice = *maybeFlight.(*[]*Flight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flightR{}
		}
		args = append(args, object.OriginID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightR{}
			}

			for _, a := range args {
				if a == obj.OriginID {
					continue Outer
				}
			}

			args = append(args, obj.OriginID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`airports`),
		qm.WhereIn(`airports.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Airport")
	}

	var resultSlice []*Airport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Airport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for airports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Origin = foreign
		if foreign.R == nil {
			foreign.R = &airportR{}
		}
		foreign.R.OriginFlights = append(foreign.R.OriginFlights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.OriginID == foreign.ID {
				local.R.Origin = foreign
				if foreign.R == nil {
					foreign.R = &airportR{}
				}
				foreign.R.OriginFlights = append(foreign.R.OriginFlights, local)
				break
			}
		}
	}

	return nil
}

// LoadDestination allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightL) LoadDestination(e boil.Executor, singular bool, maybeFlight interface{}, mods queries.Applicator) error {
	var slice []*Flight
	var object *Flight

	if singular {
		object = maybeFlight.(*Flight)
	} else {
		slice = *maybeFlight.(*[]*Flight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flightR{}
		}
		args = append(args, object.DestinationID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightR{}
			}

			for _, a := range args {
				if a == obj.DestinationID {
					continue Outer
				}
			}

			args = append(args, obj.DestinationID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`airports`),
		qm.WhereIn(`airports.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Airport")
	}

	var resultSlice []*Airport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Airport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for airports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Destination = foreign
		if foreign.R == nil {
			foreign.R = &airportR{}
		}
		foreign.R.DestinationFlights = append(foreign.R.DestinationFlights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.DestinationID == foreign.ID {
				local.R.Destination = foreign
				if foreign.R == nil {
					foreign.R = &airportR{}
				}
				foreign.R.DestinationFlights = append(foreign.R.DestinationFlights, local)
				break
			}
		}
	}

	return nil
}

// LoadJet allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightL) LoadJet(e boil.Executor, singular bool, maybeFlight interface{}, mods queries.Applicator) error {
	var slice []*Flight
	var object *Flight

	if singular {
		object = maybeFlight.(*Flight)
	} else {
		slice = *maybeFlight.(*[]*Flight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flightR{}
		}
		args = append(args, object.JetID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightR{}
			}

			for _, a := range args {
				if a == obj.JetID {
					continue Outer
				}
			}

			args = append(args, obj.JetID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`jets`),
		qm.WhereIn(`jets.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Jet")
	}

	var resultSlice []*Jet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Jet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for jets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for jets")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Jet = foreign
		if foreign.R == nil {
			foreign.R = &jetR{}
		}
		foreign.R.Flights = append(foreign.R.Flights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.JetID == foreign.ID {
				local.R.Jet = foreign
				if foreign.R == nil {
					foreign.R = &jetR{}
				}
				foreign.R.Flights = append(foreign.R.Flights, local)
				break
			}
		}
	}

	return nil
}

// LoadPilot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightL) LoadPilot(e boil.Executor, singular bool, maybeFlight interface{}, mods queries.Applicator) error {
	var slice []*Flight
	var object *Flight

	if singular {
		object = maybeFlight.(*Flight)
	} else {
		slice = *maybeFlight.(*[]*Flight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flightR{}
		}
		args = append(args, object.PilotID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightR{}
			}

			for _, a := range args {
				if a == obj.PilotID {
					continue Outer
				}
			}

			args = append(args, obj.PilotID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pilots`),
		qm.WhereIn(`pilots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pilot")
	}

	var resultSlice []*Pilot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pilot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pilots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pilots")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Pilot = foreign
		if foreign.R == nil {
			foreign.R = &pilotR{}
		}
		foreign.R.Flights = append(foreign.R.Flights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.PilotID == foreign.ID {
				local.R.Pilot = foreign
				if foreign.R == nil {
					foreign.R = &pilotR{}
				}
				foreign.R.Flights = append(foreign.R.Flights, local)
				break
			}
		}
	}

	return nil
}

// LoadSecondPilot allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (flightL) LoadSecondPilot(e boil.Executor, singular bool, maybeFlight interface{}, mods queries.Applicator) error {
	var slice []*Flight
	var object *Flight

	if singular {
		object = maybeFlight.(*Flight)
	} else {
		slice = *maybeFlight.(*[]*Flight)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &flightR{}
		}
		if !queries.IsNil(object.SecondPilotID) {
			args = append(args, object.SecondPilotID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &flightR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.SecondPilotID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.SecondPilotID) {
				args = append(args, obj.SecondPilotID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`pilots`),
		qm.WhereIn(`pilots.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Pilot")
	}

	var resultSlice []*Pilot
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Pilot")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for pilots")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for pilots")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SecondPilot = foreign
		if foreign.R == nil {
			foreign.R = &pilotR{}
		}
		foreign.R.SecondPilotFlights = append(foreign.R.SecondPilotFlights, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.SecondPilotID, foreign.ID) {
				local.R.SecondPilot = foreign
				if foreign.R == nil {
					foreign.R = &pilotR{}
				}
				foreign.R.SecondPilotFlights = append(foreign.R.SecondPilotFlights, local)
				break
			}
		}
	}

	return nil
}

// SetOriginG of the flight to the related item.
// Sets o.R.Origin to related.
// Adds o to related.R.OriginFlights.
// Uses the global database handle.
func (o *Flight) SetOriginG(insert bool, related *Airport) error {
	return o.SetOrigin(boil.GetDB(), insert, related)
}

// SetOrigin of the flight to the related item.
// Sets o.R.Origin to related.
// Adds o to related.R.OriginFlights.
func (o *Flight) SetOrigin(exec boil.Executor, insert bool, related *Airport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"origin_id"}),
		strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.OriginID = related.ID
	if o.R == nil {
		o.R = &flightR{
			Origin: related,
		}
	} else {
		o.R.Origin = related
	}

	if related.R == nil {
		related.R = &airportR{
			OriginFlights: FlightSlice{o},
		}
	} else {
		related.R.OriginFlights = append(related.R.OriginFlights, o)
	}

	return nil
}

// SetDestinationG of the flight to the related item.
// Sets o.R.Destination to related.
// Adds o to related.R.DestinationFlights.
// Uses the global database handle.
func (o *Flight) SetDestinationG(insert bool, related *Airport) error {
	return o.SetDestination(boil.GetDB(), insert, related)
}

// SetDestination of the flight to the related item.
// Sets o.R.Destination to related.
// Adds o to related.R.DestinationFlights.
func (o *Flight) SetDestination(exec boil.Executor, insert bool, related *Airport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"destination_id"}),
		strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.DestinationID = related.ID
	if o.R == nil {
		o.R = &flightR{
			Destination: related,
		}
	} else {
		o.R.Destination = related
	}

	if related.R == nil {
		related.R = &airportR{
			DestinationFlights: FlightSlice{o},
		}
	} else {
		related.R.DestinationFlights = append(related.R.DestinationFlights, o)
	}

	return nil
}

// SetJetG of the flight to the related item.
// Sets o.R.Jet to related.
// Adds o to related.R.Flights.
// Uses the global database handle.
func (o *Flight) SetJetG(insert bool, related *Jet) error {
	return o.SetJet(boil.GetDB(), insert, related)
}

// SetJet of the flight to the related item.
// Sets o.R.Jet to related.
// Adds o to related.R.Flights.
func (o *Flight) SetJet(exec boil.Executor, insert bool, related *Jet) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"jet_id"}),
		strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.JetID = related.ID
	if o.R == nil {
		o.R = &flightR{
			Jet: related,
		}
	} else {
		o.R.Jet = related
	}

	if related.R == nil {
		related.R = &jetR{
			Flights: FlightSlice{o},
		}
	} else {
		related.R.Flights = append(related.R.Flights, o)
	}

	return nil
}

// SetPilotG of the flight to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.Flights.
// Uses the global database handle.
func (o *Flight) SetPilotG(insert bool, related *Pilot) error {
	return o.SetPilot(boil.GetDB(), insert, related)
}

// SetPilot of the flight to the related item.
// Sets o.R.Pilot to related.
// Adds o to related.R.Flights.
func (o *Flight) SetPilot(exec boil.Executor, insert bool, related *Pilot) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"pilot_id"}),
		strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.PilotID = related.ID
	if o.R == nil {
		o.R = &flightR{
			Pilot: related,
		}
	} else {
		o.R.Pilot = related
	}

	if related.R == nil {
		related.R = &pilotR{
			Flights: FlightSlice{o},
		}
	} else {
		related.R.Flights = append(related.R.Flights, o)
	}

	return nil
}

// SetSecondPilotG of the flight to the related item.
// Sets o.R.SecondPilot to related.
// Adds o to related.R.SecondPilotFlights.
// Uses the global database handle.
func (o *Flight) SetSecondPilotG(insert bool, related *Pilot) error {
	return o.SetSecondPilot(boil.GetDB(), insert, related)
}

// SetSecondPilot of the flight to the related item.
// Sets o.R.SecondPilot to related.
// Adds o to related.R.SecondPilotFlights.
func (o *Flight) SetSecondPilot(exec boil.Executor, insert bool, related *Pilot) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `flights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"second_pilot_id"}),
		strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.SecondPilotID, related.ID)
	if o.R == nil {
		o.R = &flightR{
			SecondPilot: related,
		}
	} else {
		o.R.SecondPilot = related
	}

	if related.R == nil {
		related.R = &pilotR{
			SecondPilotFlights: FlightSlice{o},
		}
	} else {
		related.R.SecondPilotFlights = append(related.R.SecondPilotFlights, o)
	}

	return nil
}

// RemoveSecondPilotG relationship.
// Sets o.R.SecondPilot to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Flight) RemoveSecondPilotG(related *Pilot) error {
	return o.RemoveSecondPilot(boil.GetDB(), related)
}

// RemoveSecondPilot relationship.
// Sets o.R.SecondPilot to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Flight) RemoveSecondPilot(exec boil.Executor, related *Pilot) error {
	var err error

	queries.SetScanner(&o.SecondPilotID, nil)
	if _, err = o.Update(exec, boil.Whitelist("second_pilot_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.SecondPilot = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.SecondPilotFlights {
		if queries.Equal(o.SecondPilotID, ri.SecondPilotID) {
			continue
		}

		ln := len(related.R.SecondPilotFlights)
		if ln > 1 && i < ln-1 {
			related.R.SecondPilotFlights[i] = related.R.SecondPilotFlights[ln-1]
		}
		related.R.SecondPilotFlights = related.R.SecondPilotFlights[:ln-1]
		break
	}
	return nil
}

// Flights retrieves all the records using an executor.
func Flights(mods ...qm.QueryMod) flightQuery {
	mods = append(mods, qm.From("`flights`"))
	return flightQuery{NewQuery(mods...)}
}

// FindFlightG retrieves a single record by ID.
func FindFlightG(iD uint64, selectCols ...string) (*Flight, error) {
	return FindFlight(boil.GetDB(), iD, selectCols...)
}

// FindFlight retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindFlight(exec boil.Executor, iD uint64, selectCols ...string) (*Flight, error) {
	flightObj := &Flight{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `flights` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, flightObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from flights")
	}

	return flightObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Flight) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Flight) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flights provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(flightColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	flightInsertCacheMut.RLock()
	cache, cached := flightInsertCache[key]
	flightInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			flightAllColumns,
			flightColumnsWithDefault,
			flightColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(flightType, flightMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(flightType, flightMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `flights` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `flights` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `flights` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into flights")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flightMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flights")
	}

CacheNoHooks:
	if !cached {
		flightInsertCacheMut.Lock()
		flightInsertCache[key] = cache
		flightInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Flight record using the global executor.
// See Update for more documentation.
func (o *Flight) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Flight.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Flight) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	flightUpdateCacheMut.RLock()
	cache, cached := flightUpdateCache[key]
	flightUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			flightAllColumns,
			flightPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update flights, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `flights` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(flightType, flightMapping, append(wl, flightPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update flights row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for flights")
	}

	if !cached {
		flightUpdateCacheMut.Lock()
		flightUpdateCache[key] = cache
		flightUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q flightQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q flightQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for flights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for flights")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o FlightSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o FlightSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `flights` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flightPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in flight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all flight")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Flight) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLFlightUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Flight) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no flights provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(flightColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLFlightUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	flightUpsertCacheMut.RLock()
	cache, cached := flightUpsertCache[key]
	flightUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			flightAllColumns,
			flightColumnsWithDefault,
			flightColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			flightAllColumns,
			flightPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert flights, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "flights", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `flights` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(flightType, flightMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(flightType, flightMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for flights")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint64(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == flightMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(flightType, flightMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for flights")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for flights")
	}

CacheNoHooks:
	if !cached {
		flightUpsertCacheMut.Lock()
		flightUpsertCache[key] = cache
		flightUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Flight record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Flight) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Flight record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Flight) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Flight provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), flightPrimaryKeyMapping)
	sql := "DELETE FROM `flights` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from flights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for flights")
	}

	return rowsAff, nil
}

func (q flightQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q flightQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no flightQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flights")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flights")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o FlightSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o FlightSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `flights` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flightPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from flight slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for flights")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Flight) ReloadG() error {
	if o == nil {
		return errors.New("models: no Flight provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Flight) Reload(exec boil.Executor) error {
	ret, err := FindFlight(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlightSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty FlightSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *FlightSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := FlightSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), flightPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `flights`.* FROM `flights` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, flightPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in FlightSlice")
	}

	*o = slice

	return nil
}

// FlightExistsG checks if the Flight row exists.
func FlightExistsG(iD uint64) (bool, error) {
	return FlightExists(boil.GetDB(), iD)
}

// FlightExists checks if the Flight row exists.
func FlightExists(exec boil.Executor, iD uint64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `flights` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if flights exists")
	}

	return exists, nil
}
