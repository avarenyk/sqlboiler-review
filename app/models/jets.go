// Code generated by SQLBoiler 4.1.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// Jet is an object representing the database table.
type Jet struct {
	ID            int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Type          string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	Color         string    `boil:"color" json:"color" toml:"color" yaml:"color"`
	HomeAirportID null.Int  `boil:"home_airport_id" json:"home_airport_id,omitempty" toml:"home_airport_id" yaml:"home_airport_id,omitempty"`
	CreatedAt     time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt     time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *jetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L jetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var JetColumns = struct {
	ID            string
	Type          string
	Color         string
	HomeAirportID string
	CreatedAt     string
	UpdatedAt     string
}{
	ID:            "id",
	Type:          "type",
	Color:         "color",
	HomeAirportID: "home_airport_id",
	CreatedAt:     "created_at",
	UpdatedAt:     "updated_at",
}

// Generated where

var JetWhere = struct {
	ID            whereHelperint
	Type          whereHelperstring
	Color         whereHelperstring
	HomeAirportID whereHelpernull_Int
	CreatedAt     whereHelpertime_Time
	UpdatedAt     whereHelpertime_Time
}{
	ID:            whereHelperint{field: "`jets`.`id`"},
	Type:          whereHelperstring{field: "`jets`.`type`"},
	Color:         whereHelperstring{field: "`jets`.`color`"},
	HomeAirportID: whereHelpernull_Int{field: "`jets`.`home_airport_id`"},
	CreatedAt:     whereHelpertime_Time{field: "`jets`.`created_at`"},
	UpdatedAt:     whereHelpertime_Time{field: "`jets`.`updated_at`"},
}

// JetRels is where relationship names are stored.
var JetRels = struct {
	HomeAirport string
	Flights     string
}{
	HomeAirport: "HomeAirport",
	Flights:     "Flights",
}

// jetR is where relationships are stored.
type jetR struct {
	HomeAirport *Airport    `boil:"HomeAirport" json:"HomeAirport" toml:"HomeAirport" yaml:"HomeAirport"`
	Flights     FlightSlice `boil:"Flights" json:"Flights" toml:"Flights" yaml:"Flights"`
}

// NewStruct creates a new relationship struct
func (*jetR) NewStruct() *jetR {
	return &jetR{}
}

// jetL is where Load methods for each relationship are stored.
type jetL struct{}

var (
	jetAllColumns            = []string{"id", "type", "color", "home_airport_id", "created_at", "updated_at"}
	jetColumnsWithoutDefault = []string{"type", "color", "home_airport_id"}
	jetColumnsWithDefault    = []string{"id", "created_at", "updated_at"}
	jetPrimaryKeyColumns     = []string{"id"}
)

type (
	// JetSlice is an alias for a slice of pointers to Jet.
	// This should generally be used opposed to []Jet.
	JetSlice []*Jet

	jetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	jetType                 = reflect.TypeOf(&Jet{})
	jetMapping              = queries.MakeStructMapping(jetType)
	jetPrimaryKeyMapping, _ = queries.BindMapping(jetType, jetMapping, jetPrimaryKeyColumns)
	jetInsertCacheMut       sync.RWMutex
	jetInsertCache          = make(map[string]insertCache)
	jetUpdateCacheMut       sync.RWMutex
	jetUpdateCache          = make(map[string]updateCache)
	jetUpsertCacheMut       sync.RWMutex
	jetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single jet record from the query using the global executor.
func (q jetQuery) OneG() (*Jet, error) {
	return q.One(boil.GetDB())
}

// One returns a single jet record from the query.
func (q jetQuery) One(exec boil.Executor) (*Jet, error) {
	o := &Jet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for jets")
	}

	return o, nil
}

// AllG returns all Jet records from the query using the global executor.
func (q jetQuery) AllG() (JetSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Jet records from the query.
func (q jetQuery) All(exec boil.Executor) (JetSlice, error) {
	var o []*Jet

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Jet slice")
	}

	return o, nil
}

// CountG returns the count of all Jet records in the query, and panics on error.
func (q jetQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Jet records in the query.
func (q jetQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count jets rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q jetQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q jetQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if jets exists")
	}

	return count > 0, nil
}

// HomeAirport pointed to by the foreign key.
func (o *Jet) HomeAirport(mods ...qm.QueryMod) airportQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.HomeAirportID),
	}

	queryMods = append(queryMods, mods...)

	query := Airports(queryMods...)
	queries.SetFrom(query.Query, "`airports`")

	return query
}

// Flights retrieves all the flight's Flights with an executor.
func (o *Jet) Flights(mods ...qm.QueryMod) flightQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`flights`.`jet_id`=?", o.ID),
	)

	query := Flights(queryMods...)
	queries.SetFrom(query.Query, "`flights`")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"`flights`.*"})
	}

	return query
}

// LoadHomeAirport allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (jetL) LoadHomeAirport(e boil.Executor, singular bool, maybeJet interface{}, mods queries.Applicator) error {
	var slice []*Jet
	var object *Jet

	if singular {
		object = maybeJet.(*Jet)
	} else {
		slice = *maybeJet.(*[]*Jet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jetR{}
		}
		if !queries.IsNil(object.HomeAirportID) {
			args = append(args, object.HomeAirportID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jetR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.HomeAirportID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.HomeAirportID) {
				args = append(args, obj.HomeAirportID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`airports`),
		qm.WhereIn(`airports.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Airport")
	}

	var resultSlice []*Airport
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Airport")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for airports")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for airports")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.HomeAirport = foreign
		if foreign.R == nil {
			foreign.R = &airportR{}
		}
		foreign.R.HomeAirportJets = append(foreign.R.HomeAirportJets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.HomeAirportID, foreign.ID) {
				local.R.HomeAirport = foreign
				if foreign.R == nil {
					foreign.R = &airportR{}
				}
				foreign.R.HomeAirportJets = append(foreign.R.HomeAirportJets, local)
				break
			}
		}
	}

	return nil
}

// LoadFlights allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (jetL) LoadFlights(e boil.Executor, singular bool, maybeJet interface{}, mods queries.Applicator) error {
	var slice []*Jet
	var object *Jet

	if singular {
		object = maybeJet.(*Jet)
	} else {
		slice = *maybeJet.(*[]*Jet)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &jetR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &jetR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`flights`),
		qm.WhereIn(`flights.jet_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load flights")
	}

	var resultSlice []*Flight
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice flights")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on flights")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for flights")
	}

	if singular {
		object.R.Flights = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &flightR{}
			}
			foreign.R.Jet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.JetID {
				local.R.Flights = append(local.R.Flights, foreign)
				if foreign.R == nil {
					foreign.R = &flightR{}
				}
				foreign.R.Jet = local
				break
			}
		}
	}

	return nil
}

// SetHomeAirportG of the jet to the related item.
// Sets o.R.HomeAirport to related.
// Adds o to related.R.HomeAirportJets.
// Uses the global database handle.
func (o *Jet) SetHomeAirportG(insert bool, related *Airport) error {
	return o.SetHomeAirport(boil.GetDB(), insert, related)
}

// SetHomeAirport of the jet to the related item.
// Sets o.R.HomeAirport to related.
// Adds o to related.R.HomeAirportJets.
func (o *Jet) SetHomeAirport(exec boil.Executor, insert bool, related *Airport) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `jets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"home_airport_id"}),
		strmangle.WhereClause("`", "`", 0, jetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.HomeAirportID, related.ID)
	if o.R == nil {
		o.R = &jetR{
			HomeAirport: related,
		}
	} else {
		o.R.HomeAirport = related
	}

	if related.R == nil {
		related.R = &airportR{
			HomeAirportJets: JetSlice{o},
		}
	} else {
		related.R.HomeAirportJets = append(related.R.HomeAirportJets, o)
	}

	return nil
}

// RemoveHomeAirportG relationship.
// Sets o.R.HomeAirport to nil.
// Removes o from all passed in related items' relationships struct (Optional).
// Uses the global database handle.
func (o *Jet) RemoveHomeAirportG(related *Airport) error {
	return o.RemoveHomeAirport(boil.GetDB(), related)
}

// RemoveHomeAirport relationship.
// Sets o.R.HomeAirport to nil.
// Removes o from all passed in related items' relationships struct (Optional).
func (o *Jet) RemoveHomeAirport(exec boil.Executor, related *Airport) error {
	var err error

	queries.SetScanner(&o.HomeAirportID, nil)
	if _, err = o.Update(exec, boil.Whitelist("home_airport_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.HomeAirport = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.HomeAirportJets {
		if queries.Equal(o.HomeAirportID, ri.HomeAirportID) {
			continue
		}

		ln := len(related.R.HomeAirportJets)
		if ln > 1 && i < ln-1 {
			related.R.HomeAirportJets[i] = related.R.HomeAirportJets[ln-1]
		}
		related.R.HomeAirportJets = related.R.HomeAirportJets[:ln-1]
		break
	}
	return nil
}

// AddFlightsG adds the given related objects to the existing relationships
// of the jet, optionally inserting them as new records.
// Appends related to o.R.Flights.
// Sets related.R.Jet appropriately.
// Uses the global database handle.
func (o *Jet) AddFlightsG(insert bool, related ...*Flight) error {
	return o.AddFlights(boil.GetDB(), insert, related...)
}

// AddFlights adds the given related objects to the existing relationships
// of the jet, optionally inserting them as new records.
// Appends related to o.R.Flights.
// Sets related.R.Jet appropriately.
func (o *Jet) AddFlights(exec boil.Executor, insert bool, related ...*Flight) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.JetID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `flights` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"jet_id"}),
				strmangle.WhereClause("`", "`", 0, flightPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.JetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &jetR{
			Flights: related,
		}
	} else {
		o.R.Flights = append(o.R.Flights, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &flightR{
				Jet: o,
			}
		} else {
			rel.R.Jet = o
		}
	}
	return nil
}

// Jets retrieves all the records using an executor.
func Jets(mods ...qm.QueryMod) jetQuery {
	mods = append(mods, qm.From("`jets`"))
	return jetQuery{NewQuery(mods...)}
}

// FindJetG retrieves a single record by ID.
func FindJetG(iD int, selectCols ...string) (*Jet, error) {
	return FindJet(boil.GetDB(), iD, selectCols...)
}

// FindJet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindJet(exec boil.Executor, iD int, selectCols ...string) (*Jet, error) {
	jetObj := &Jet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `jets` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, jetObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from jets")
	}

	return jetObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Jet) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Jet) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no jets provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	nzDefaults := queries.NonZeroDefaultSet(jetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	jetInsertCacheMut.RLock()
	cache, cached := jetInsertCache[key]
	jetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			jetAllColumns,
			jetColumnsWithDefault,
			jetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(jetType, jetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(jetType, jetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `jets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `jets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `jets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, jetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into jets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jetMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, identifierCols...)
	}
	err = exec.QueryRow(cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for jets")
	}

CacheNoHooks:
	if !cached {
		jetInsertCacheMut.Lock()
		jetInsertCache[key] = cache
		jetInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single Jet record using the global executor.
// See Update for more documentation.
func (o *Jet) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Jet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Jet) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	key := makeCacheKey(columns, nil)
	jetUpdateCacheMut.RLock()
	cache, cached := jetUpdateCache[key]
	jetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			jetAllColumns,
			jetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update jets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `jets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, jetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(jetType, jetMapping, append(wl, jetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update jets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for jets")
	}

	if !cached {
		jetUpdateCacheMut.Lock()
		jetUpdateCache[key] = cache
		jetUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (q jetQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q jetQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for jets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for jets")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o JetSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o JetSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `jets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jetPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in jet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all jet")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Jet) UpsertG(updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateColumns, insertColumns)
}

var mySQLJetUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Jet) Upsert(exec boil.Executor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no jets provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	nzDefaults := queries.NonZeroDefaultSet(jetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLJetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	jetUpsertCacheMut.RLock()
	cache, cached := jetUpsertCache[key]
	jetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			jetAllColumns,
			jetColumnsWithDefault,
			jetColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			jetAllColumns,
			jetPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert jets, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "jets", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `jets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(jetType, jetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(jetType, jetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	result, err := exec.Exec(cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for jets")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == jetMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(jetType, jetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for jets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.retQuery)
		fmt.Fprintln(boil.DebugWriter, nzUniqueCols...)
	}
	err = exec.QueryRow(cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for jets")
	}

CacheNoHooks:
	if !cached {
		jetUpsertCacheMut.Lock()
		jetUpsertCache[key] = cache
		jetUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single Jet record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Jet) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Jet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Jet) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Jet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), jetPrimaryKeyMapping)
	sql := "DELETE FROM `jets` WHERE `id`=?"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from jets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for jets")
	}

	return rowsAff, nil
}

func (q jetQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q jetQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no jetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for jets")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o JetSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o JetSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `jets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jetPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from jet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for jets")
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Jet) ReloadG() error {
	if o == nil {
		return errors.New("models: no Jet provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Jet) Reload(exec boil.Executor) error {
	ret, err := FindJet(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JetSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty JetSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *JetSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := JetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), jetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `jets`.* FROM `jets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, jetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in JetSlice")
	}

	*o = slice

	return nil
}

// JetExistsG checks if the Jet row exists.
func JetExistsG(iD int) (bool, error) {
	return JetExists(boil.GetDB(), iD)
}

// JetExists checks if the Jet row exists.
func JetExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `jets` where `id`=? limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if jets exists")
	}

	return exists, nil
}
